// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ddr_hls_test.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ddr_hls_test::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ddr_hls_test::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<23> ddr_hls_test::ap_ST_fsm_state1 = "1";
const sc_lv<23> ddr_hls_test::ap_ST_fsm_state2 = "10";
const sc_lv<23> ddr_hls_test::ap_ST_fsm_state3 = "100";
const sc_lv<23> ddr_hls_test::ap_ST_fsm_state4 = "1000";
const sc_lv<23> ddr_hls_test::ap_ST_fsm_state5 = "10000";
const sc_lv<23> ddr_hls_test::ap_ST_fsm_state6 = "100000";
const sc_lv<23> ddr_hls_test::ap_ST_fsm_state7 = "1000000";
const sc_lv<23> ddr_hls_test::ap_ST_fsm_state8 = "10000000";
const sc_lv<23> ddr_hls_test::ap_ST_fsm_state9 = "100000000";
const sc_lv<23> ddr_hls_test::ap_ST_fsm_state10 = "1000000000";
const sc_lv<23> ddr_hls_test::ap_ST_fsm_state11 = "10000000000";
const sc_lv<23> ddr_hls_test::ap_ST_fsm_state12 = "100000000000";
const sc_lv<23> ddr_hls_test::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<23> ddr_hls_test::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<23> ddr_hls_test::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<23> ddr_hls_test::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<23> ddr_hls_test::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<23> ddr_hls_test::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<23> ddr_hls_test::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<23> ddr_hls_test::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<23> ddr_hls_test::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<23> ddr_hls_test::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<23> ddr_hls_test::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<32> ddr_hls_test::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> ddr_hls_test::ap_const_lv32_5 = "101";
const sc_lv<32> ddr_hls_test::ap_const_lv32_6 = "110";
const sc_lv<32> ddr_hls_test::ap_const_lv32_B = "1011";
const sc_lv<32> ddr_hls_test::ap_const_lv32_E = "1110";
const sc_lv<32> ddr_hls_test::ap_const_lv32_15 = "10101";
const int ddr_hls_test::C_S_AXI_DATA_WIDTH = "100000";
const int ddr_hls_test::C_M_AXI_GMEM_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int ddr_hls_test::C_M_AXI_GMEM_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int ddr_hls_test::C_M_AXI_GMEM_CACHE_VALUE = "11";
const int ddr_hls_test::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> ddr_hls_test::ap_const_lv32_1 = "1";
const sc_lv<1> ddr_hls_test::ap_const_lv1_1 = "1";
const sc_lv<32> ddr_hls_test::ap_const_lv32_2 = "10";
const sc_lv<32> ddr_hls_test::ap_const_lv32_3 = "11";
const sc_lv<1> ddr_hls_test::ap_const_lv1_0 = "0";
const sc_lv<32> ddr_hls_test::ap_const_lv32_4 = "100";
const sc_lv<32> ddr_hls_test::ap_const_lv32_C = "1100";
const sc_lv<32> ddr_hls_test::ap_const_lv32_D = "1101";
const sc_lv<31> ddr_hls_test::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<14> ddr_hls_test::ap_const_lv14_0 = "00000000000000";
const sc_lv<32> ddr_hls_test::ap_const_lv32_16 = "10110";
const sc_lv<3> ddr_hls_test::ap_const_lv3_0 = "000";
const sc_lv<2> ddr_hls_test::ap_const_lv2_0 = "00";
const sc_lv<4> ddr_hls_test::ap_const_lv4_0 = "0000";
const sc_lv<8> ddr_hls_test::ap_const_lv8_FF = "11111111";
const sc_lv<32> ddr_hls_test::ap_const_lv32_4D2 = "10011010010";
const sc_lv<32> ddr_hls_test::ap_const_lv32_10E1 = "1000011100001";
const sc_lv<32> ddr_hls_test::ap_const_lv32_32F = "1100101111";
const sc_lv<32> ddr_hls_test::ap_const_lv32_206 = "1000000110";
const sc_lv<32> ddr_hls_test::ap_const_lv32_1F = "11111";
const sc_lv<32> ddr_hls_test::ap_const_lv32_7CA = "11111001010";
const sc_lv<31> ddr_hls_test::ap_const_lv31_1 = "1";
const sc_lv<14> ddr_hls_test::ap_const_lv14_2800 = "10100000000000";
const sc_lv<14> ddr_hls_test::ap_const_lv14_1 = "1";
const bool ddr_hls_test::ap_const_boolean_1 = true;

ddr_hls_test::ddr_hls_test(sc_module_name name) : sc_module(name), mVcdFile(0) {
    addr_bram_U = new ddr_hls_test_addrbkb("addr_bram_U");
    addr_bram_U->clk(ap_clk);
    addr_bram_U->reset(ap_rst_n_inv);
    addr_bram_U->address0(addr_bram_address0);
    addr_bram_U->ce0(addr_bram_ce0);
    addr_bram_U->q0(addr_bram_q0);
    ddr_hls_test_BUS_A_s_axi_U = new ddr_hls_test_BUS_A_s_axi<C_S_AXI_BUS_A_ADDR_WIDTH,C_S_AXI_BUS_A_DATA_WIDTH>("ddr_hls_test_BUS_A_s_axi_U");
    ddr_hls_test_BUS_A_s_axi_U->AWVALID(s_axi_BUS_A_AWVALID);
    ddr_hls_test_BUS_A_s_axi_U->AWREADY(s_axi_BUS_A_AWREADY);
    ddr_hls_test_BUS_A_s_axi_U->AWADDR(s_axi_BUS_A_AWADDR);
    ddr_hls_test_BUS_A_s_axi_U->WVALID(s_axi_BUS_A_WVALID);
    ddr_hls_test_BUS_A_s_axi_U->WREADY(s_axi_BUS_A_WREADY);
    ddr_hls_test_BUS_A_s_axi_U->WDATA(s_axi_BUS_A_WDATA);
    ddr_hls_test_BUS_A_s_axi_U->WSTRB(s_axi_BUS_A_WSTRB);
    ddr_hls_test_BUS_A_s_axi_U->ARVALID(s_axi_BUS_A_ARVALID);
    ddr_hls_test_BUS_A_s_axi_U->ARREADY(s_axi_BUS_A_ARREADY);
    ddr_hls_test_BUS_A_s_axi_U->ARADDR(s_axi_BUS_A_ARADDR);
    ddr_hls_test_BUS_A_s_axi_U->RVALID(s_axi_BUS_A_RVALID);
    ddr_hls_test_BUS_A_s_axi_U->RREADY(s_axi_BUS_A_RREADY);
    ddr_hls_test_BUS_A_s_axi_U->RDATA(s_axi_BUS_A_RDATA);
    ddr_hls_test_BUS_A_s_axi_U->RRESP(s_axi_BUS_A_RRESP);
    ddr_hls_test_BUS_A_s_axi_U->BVALID(s_axi_BUS_A_BVALID);
    ddr_hls_test_BUS_A_s_axi_U->BREADY(s_axi_BUS_A_BREADY);
    ddr_hls_test_BUS_A_s_axi_U->BRESP(s_axi_BUS_A_BRESP);
    ddr_hls_test_BUS_A_s_axi_U->ACLK(ap_clk);
    ddr_hls_test_BUS_A_s_axi_U->ARESET(ap_rst_n_inv);
    ddr_hls_test_BUS_A_s_axi_U->ACLK_EN(ap_var_for_const0);
    ddr_hls_test_BUS_A_s_axi_U->ap_start(ap_start);
    ddr_hls_test_BUS_A_s_axi_U->interrupt(interrupt);
    ddr_hls_test_BUS_A_s_axi_U->ap_ready(ap_ready);
    ddr_hls_test_BUS_A_s_axi_U->ap_done(ap_done);
    ddr_hls_test_BUS_A_s_axi_U->ap_idle(ap_idle);
    ddr_hls_test_BUS_A_s_axi_U->start_signal_o(start_signal_o);
    ddr_hls_test_BUS_A_s_axi_U->start_signal_o_ap_vld(start_signal_o_ap_vld);
    ddr_hls_test_BUS_A_s_axi_U->start_signal_i(start_signal_i);
    ddr_hls_test_BUS_A_s_axi_U->hls_check(hls_check);
    ddr_hls_test_BUS_A_s_axi_U->hls_check_ap_vld(hls_check_ap_vld);
    ddr_hls_test_BUS_A_s_axi_U->num(num);
    ddr_hls_test_BUS_A_s_axi_U->saMaster(saMaster);
    ddr_hls_test_gmem_m_axi_U = new ddr_hls_test_gmem_m_axi<0,64,32,5,1,1,4,4,C_M_AXI_GMEM_ID_WIDTH,C_M_AXI_GMEM_ADDR_WIDTH,C_M_AXI_GMEM_DATA_WIDTH,C_M_AXI_GMEM_AWUSER_WIDTH,C_M_AXI_GMEM_ARUSER_WIDTH,C_M_AXI_GMEM_WUSER_WIDTH,C_M_AXI_GMEM_RUSER_WIDTH,C_M_AXI_GMEM_BUSER_WIDTH,C_M_AXI_GMEM_USER_VALUE,C_M_AXI_GMEM_PROT_VALUE,C_M_AXI_GMEM_CACHE_VALUE>("ddr_hls_test_gmem_m_axi_U");
    ddr_hls_test_gmem_m_axi_U->AWVALID(m_axi_gmem_AWVALID);
    ddr_hls_test_gmem_m_axi_U->AWREADY(m_axi_gmem_AWREADY);
    ddr_hls_test_gmem_m_axi_U->AWADDR(m_axi_gmem_AWADDR);
    ddr_hls_test_gmem_m_axi_U->AWID(m_axi_gmem_AWID);
    ddr_hls_test_gmem_m_axi_U->AWLEN(m_axi_gmem_AWLEN);
    ddr_hls_test_gmem_m_axi_U->AWSIZE(m_axi_gmem_AWSIZE);
    ddr_hls_test_gmem_m_axi_U->AWBURST(m_axi_gmem_AWBURST);
    ddr_hls_test_gmem_m_axi_U->AWLOCK(m_axi_gmem_AWLOCK);
    ddr_hls_test_gmem_m_axi_U->AWCACHE(m_axi_gmem_AWCACHE);
    ddr_hls_test_gmem_m_axi_U->AWPROT(m_axi_gmem_AWPROT);
    ddr_hls_test_gmem_m_axi_U->AWQOS(m_axi_gmem_AWQOS);
    ddr_hls_test_gmem_m_axi_U->AWREGION(m_axi_gmem_AWREGION);
    ddr_hls_test_gmem_m_axi_U->AWUSER(m_axi_gmem_AWUSER);
    ddr_hls_test_gmem_m_axi_U->WVALID(m_axi_gmem_WVALID);
    ddr_hls_test_gmem_m_axi_U->WREADY(m_axi_gmem_WREADY);
    ddr_hls_test_gmem_m_axi_U->WDATA(m_axi_gmem_WDATA);
    ddr_hls_test_gmem_m_axi_U->WSTRB(m_axi_gmem_WSTRB);
    ddr_hls_test_gmem_m_axi_U->WLAST(m_axi_gmem_WLAST);
    ddr_hls_test_gmem_m_axi_U->WID(m_axi_gmem_WID);
    ddr_hls_test_gmem_m_axi_U->WUSER(m_axi_gmem_WUSER);
    ddr_hls_test_gmem_m_axi_U->ARVALID(m_axi_gmem_ARVALID);
    ddr_hls_test_gmem_m_axi_U->ARREADY(m_axi_gmem_ARREADY);
    ddr_hls_test_gmem_m_axi_U->ARADDR(m_axi_gmem_ARADDR);
    ddr_hls_test_gmem_m_axi_U->ARID(m_axi_gmem_ARID);
    ddr_hls_test_gmem_m_axi_U->ARLEN(m_axi_gmem_ARLEN);
    ddr_hls_test_gmem_m_axi_U->ARSIZE(m_axi_gmem_ARSIZE);
    ddr_hls_test_gmem_m_axi_U->ARBURST(m_axi_gmem_ARBURST);
    ddr_hls_test_gmem_m_axi_U->ARLOCK(m_axi_gmem_ARLOCK);
    ddr_hls_test_gmem_m_axi_U->ARCACHE(m_axi_gmem_ARCACHE);
    ddr_hls_test_gmem_m_axi_U->ARPROT(m_axi_gmem_ARPROT);
    ddr_hls_test_gmem_m_axi_U->ARQOS(m_axi_gmem_ARQOS);
    ddr_hls_test_gmem_m_axi_U->ARREGION(m_axi_gmem_ARREGION);
    ddr_hls_test_gmem_m_axi_U->ARUSER(m_axi_gmem_ARUSER);
    ddr_hls_test_gmem_m_axi_U->RVALID(m_axi_gmem_RVALID);
    ddr_hls_test_gmem_m_axi_U->RREADY(m_axi_gmem_RREADY);
    ddr_hls_test_gmem_m_axi_U->RDATA(m_axi_gmem_RDATA);
    ddr_hls_test_gmem_m_axi_U->RLAST(m_axi_gmem_RLAST);
    ddr_hls_test_gmem_m_axi_U->RID(m_axi_gmem_RID);
    ddr_hls_test_gmem_m_axi_U->RUSER(m_axi_gmem_RUSER);
    ddr_hls_test_gmem_m_axi_U->RRESP(m_axi_gmem_RRESP);
    ddr_hls_test_gmem_m_axi_U->BVALID(m_axi_gmem_BVALID);
    ddr_hls_test_gmem_m_axi_U->BREADY(m_axi_gmem_BREADY);
    ddr_hls_test_gmem_m_axi_U->BRESP(m_axi_gmem_BRESP);
    ddr_hls_test_gmem_m_axi_U->BID(m_axi_gmem_BID);
    ddr_hls_test_gmem_m_axi_U->BUSER(m_axi_gmem_BUSER);
    ddr_hls_test_gmem_m_axi_U->ACLK(ap_clk);
    ddr_hls_test_gmem_m_axi_U->ARESET(ap_rst_n_inv);
    ddr_hls_test_gmem_m_axi_U->ACLK_EN(ap_var_for_const0);
    ddr_hls_test_gmem_m_axi_U->I_ARVALID(gmem_ARVALID);
    ddr_hls_test_gmem_m_axi_U->I_ARREADY(gmem_ARREADY);
    ddr_hls_test_gmem_m_axi_U->I_ARADDR(gmem_ARADDR);
    ddr_hls_test_gmem_m_axi_U->I_ARID(ap_var_for_const1);
    ddr_hls_test_gmem_m_axi_U->I_ARLEN(ap_var_for_const2);
    ddr_hls_test_gmem_m_axi_U->I_ARSIZE(ap_var_for_const3);
    ddr_hls_test_gmem_m_axi_U->I_ARLOCK(ap_var_for_const4);
    ddr_hls_test_gmem_m_axi_U->I_ARCACHE(ap_var_for_const5);
    ddr_hls_test_gmem_m_axi_U->I_ARQOS(ap_var_for_const5);
    ddr_hls_test_gmem_m_axi_U->I_ARPROT(ap_var_for_const3);
    ddr_hls_test_gmem_m_axi_U->I_ARUSER(ap_var_for_const1);
    ddr_hls_test_gmem_m_axi_U->I_ARBURST(ap_var_for_const4);
    ddr_hls_test_gmem_m_axi_U->I_ARREGION(ap_var_for_const5);
    ddr_hls_test_gmem_m_axi_U->I_RVALID(gmem_RVALID);
    ddr_hls_test_gmem_m_axi_U->I_RREADY(gmem_RREADY);
    ddr_hls_test_gmem_m_axi_U->I_RDATA(gmem_RDATA);
    ddr_hls_test_gmem_m_axi_U->I_RID(gmem_RID);
    ddr_hls_test_gmem_m_axi_U->I_RUSER(gmem_RUSER);
    ddr_hls_test_gmem_m_axi_U->I_RRESP(gmem_RRESP);
    ddr_hls_test_gmem_m_axi_U->I_RLAST(gmem_RLAST);
    ddr_hls_test_gmem_m_axi_U->I_AWVALID(gmem_AWVALID);
    ddr_hls_test_gmem_m_axi_U->I_AWREADY(gmem_AWREADY);
    ddr_hls_test_gmem_m_axi_U->I_AWADDR(gmem_AWADDR);
    ddr_hls_test_gmem_m_axi_U->I_AWID(ap_var_for_const1);
    ddr_hls_test_gmem_m_axi_U->I_AWLEN(ap_var_for_const2);
    ddr_hls_test_gmem_m_axi_U->I_AWSIZE(ap_var_for_const3);
    ddr_hls_test_gmem_m_axi_U->I_AWLOCK(ap_var_for_const4);
    ddr_hls_test_gmem_m_axi_U->I_AWCACHE(ap_var_for_const5);
    ddr_hls_test_gmem_m_axi_U->I_AWQOS(ap_var_for_const5);
    ddr_hls_test_gmem_m_axi_U->I_AWPROT(ap_var_for_const3);
    ddr_hls_test_gmem_m_axi_U->I_AWUSER(ap_var_for_const1);
    ddr_hls_test_gmem_m_axi_U->I_AWBURST(ap_var_for_const4);
    ddr_hls_test_gmem_m_axi_U->I_AWREGION(ap_var_for_const5);
    ddr_hls_test_gmem_m_axi_U->I_WVALID(gmem_WVALID);
    ddr_hls_test_gmem_m_axi_U->I_WREADY(gmem_WREADY);
    ddr_hls_test_gmem_m_axi_U->I_WDATA(gmem_WDATA);
    ddr_hls_test_gmem_m_axi_U->I_WID(ap_var_for_const1);
    ddr_hls_test_gmem_m_axi_U->I_WUSER(ap_var_for_const1);
    ddr_hls_test_gmem_m_axi_U->I_WLAST(ap_var_for_const6);
    ddr_hls_test_gmem_m_axi_U->I_WSTRB(ap_var_for_const7);
    ddr_hls_test_gmem_m_axi_U->I_BVALID(gmem_BVALID);
    ddr_hls_test_gmem_m_axi_U->I_BREADY(gmem_BREADY);
    ddr_hls_test_gmem_m_axi_U->I_BRESP(gmem_BRESP);
    ddr_hls_test_gmem_m_axi_U->I_BID(gmem_BID);
    ddr_hls_test_gmem_m_axi_U->I_BUSER(gmem_BUSER);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_addr_bram_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( tmp_4_fu_275_p1 );
    sensitive << ( tmp_8_fu_323_p1 );

    SC_METHOD(thread_addr_bram_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_1_fu_248_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_1_fu_248_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_gmem_ARREADY);
    sensitive << ( gmem_ARREADY );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_gmem_AWREADY);
    sensitive << ( gmem_AWREADY );
    sensitive << ( ap_reg_ioackin_gmem_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_gmem_WREADY);
    sensitive << ( gmem_WREADY );
    sensitive << ( ap_reg_ioackin_gmem_WREADY );

    SC_METHOD(thread_exitcond1_fu_263_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( i_1_reg_194 );

    SC_METHOD(thread_exitcond_fu_311_p2);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( i_2_reg_205 );

    SC_METHOD(thread_gmem_ARADDR);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( saMaster2_sum3_cast_fu_342_p1 );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );

    SC_METHOD(thread_gmem_ARVALID);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_reg_ioackin_gmem_ARREADY );

    SC_METHOD(thread_gmem_AWADDR);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( saMaster2_sum_cast_fu_293_p1 );
    sensitive << ( ap_reg_ioackin_gmem_AWREADY );

    SC_METHOD(thread_gmem_AWVALID);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_reg_ioackin_gmem_AWREADY );

    SC_METHOD(thread_gmem_BREADY);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( gmem_BVALID );

    SC_METHOD(thread_gmem_RREADY);
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( gmem_RVALID );

    SC_METHOD(thread_gmem_WDATA);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_2_reg_427 );
    sensitive << ( ap_reg_ioackin_gmem_WREADY );

    SC_METHOD(thread_gmem_WVALID);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_reg_ioackin_gmem_WREADY );

    SC_METHOD(thread_gmem_blk_n_AR);
    sensitive << ( m_axi_gmem_ARREADY );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_gmem_blk_n_AW);
    sensitive << ( m_axi_gmem_AWREADY );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_gmem_blk_n_B);
    sensitive << ( m_axi_gmem_BVALID );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_gmem_blk_n_R);
    sensitive << ( m_axi_gmem_RVALID );
    sensitive << ( ap_CS_fsm_state22 );

    SC_METHOD(thread_gmem_blk_n_W);
    sensitive << ( m_axi_gmem_WREADY );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_grp_load_fu_216_p1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_1_fu_248_p2 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( res_check_fu_94 );

    SC_METHOD(thread_hls_check);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_233_p2 );

    SC_METHOD(thread_hls_check_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_233_p2 );

    SC_METHOD(thread_i_1_cast2_fu_259_p1);
    sensitive << ( i_1_reg_194 );

    SC_METHOD(thread_i_2_cast1_fu_307_p1);
    sensitive << ( i_2_reg_205 );

    SC_METHOD(thread_i_3_fu_317_p2);
    sensitive << ( i_2_reg_205 );

    SC_METHOD(thread_i_fu_269_p2);
    sensitive << ( i_1_reg_194 );

    SC_METHOD(thread_j_1_fu_253_p2);
    sensitive << ( j_reg_183 );

    SC_METHOD(thread_j_cast_fu_244_p1);
    sensitive << ( j_reg_183 );

    SC_METHOD(thread_res_check_1_fu_360_p2);
    sensitive << ( res_check_fu_94 );
    sensitive << ( tmp_7_fu_355_p2 );

    SC_METHOD(thread_saMaster2_sum3_cast_fu_342_p1);
    sensitive << ( saMaster2_sum3_reg_461 );

    SC_METHOD(thread_saMaster2_sum3_fu_337_p2);
    sensitive << ( tmp_10_cast_reg_371 );
    sensitive << ( tmp_9_cast_fu_333_p1 );

    SC_METHOD(thread_saMaster2_sum_cast_fu_293_p1);
    sensitive << ( saMaster2_sum_reg_432 );

    SC_METHOD(thread_saMaster2_sum_fu_288_p2);
    sensitive << ( tmp_10_cast_reg_371 );
    sensitive << ( tmp_5_cast_fu_284_p1 );

    SC_METHOD(thread_start_signal_o);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_1_fu_248_p2 );
    sensitive << ( grp_load_fu_216_p1 );

    SC_METHOD(thread_start_signal_o_ap_vld);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_1_fu_248_p2 );
    sensitive << ( grp_load_fu_216_p1 );

    SC_METHOD(thread_tmp_10_cast_fu_229_p1);
    sensitive << ( tmp_5_fu_219_p4 );

    SC_METHOD(thread_tmp_1_fu_248_p2);
    sensitive << ( run_cnt_reg_387 );
    sensitive << ( j_cast_fu_244_p1 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_2_fu_280_p2);
    sensitive << ( j_cast_reg_392 );
    sensitive << ( i_1_cast2_reg_409 );

    SC_METHOD(thread_tmp_4_fu_275_p1);
    sensitive << ( i_1_reg_194 );

    SC_METHOD(thread_tmp_5_cast_fu_284_p1);
    sensitive << ( addr_bram_q0 );

    SC_METHOD(thread_tmp_5_fu_219_p4);
    sensitive << ( saMaster );

    SC_METHOD(thread_tmp_6_fu_352_p1);
    sensitive << ( tmp_s_reg_456 );

    SC_METHOD(thread_tmp_7_fu_355_p2);
    sensitive << ( gmem_addr_1_read_reg_472 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( tmp_6_fu_352_p1 );

    SC_METHOD(thread_tmp_8_fu_323_p1);
    sensitive << ( i_2_reg_205 );

    SC_METHOD(thread_tmp_9_cast_fu_333_p1);
    sensitive << ( addr_bram_q0 );

    SC_METHOD(thread_tmp_fu_233_p2);
    sensitive << ( start_signal_i );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_tmp_s_fu_328_p2);
    sensitive << ( j_cast_reg_392 );
    sensitive << ( i_2_cast1_fu_307_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( gmem_RVALID );
    sensitive << ( gmem_BVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_233_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond1_fu_263_p2 );
    sensitive << ( ap_sig_ioackin_gmem_AWREADY );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( exitcond_fu_311_p2 );
    sensitive << ( ap_sig_ioackin_gmem_ARREADY );
    sensitive << ( tmp_1_fu_248_p2 );
    sensitive << ( ap_sig_ioackin_gmem_WREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const7);

    ap_CS_fsm = "00000000000000000000001";
    ap_reg_ioackin_gmem_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_gmem_WREADY = SC_LOGIC_0;
    ap_reg_ioackin_gmem_ARREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ddr_hls_test_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_gmem_AWVALID, "(port)m_axi_gmem_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem_AWREADY, "(port)m_axi_gmem_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem_AWADDR, "(port)m_axi_gmem_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem_AWID, "(port)m_axi_gmem_AWID");
    sc_trace(mVcdFile, m_axi_gmem_AWLEN, "(port)m_axi_gmem_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem_AWSIZE, "(port)m_axi_gmem_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem_AWBURST, "(port)m_axi_gmem_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem_AWLOCK, "(port)m_axi_gmem_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem_AWCACHE, "(port)m_axi_gmem_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem_AWPROT, "(port)m_axi_gmem_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem_AWQOS, "(port)m_axi_gmem_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem_AWREGION, "(port)m_axi_gmem_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem_AWUSER, "(port)m_axi_gmem_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem_WVALID, "(port)m_axi_gmem_WVALID");
    sc_trace(mVcdFile, m_axi_gmem_WREADY, "(port)m_axi_gmem_WREADY");
    sc_trace(mVcdFile, m_axi_gmem_WDATA, "(port)m_axi_gmem_WDATA");
    sc_trace(mVcdFile, m_axi_gmem_WSTRB, "(port)m_axi_gmem_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem_WLAST, "(port)m_axi_gmem_WLAST");
    sc_trace(mVcdFile, m_axi_gmem_WID, "(port)m_axi_gmem_WID");
    sc_trace(mVcdFile, m_axi_gmem_WUSER, "(port)m_axi_gmem_WUSER");
    sc_trace(mVcdFile, m_axi_gmem_ARVALID, "(port)m_axi_gmem_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem_ARREADY, "(port)m_axi_gmem_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem_ARADDR, "(port)m_axi_gmem_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem_ARID, "(port)m_axi_gmem_ARID");
    sc_trace(mVcdFile, m_axi_gmem_ARLEN, "(port)m_axi_gmem_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem_ARSIZE, "(port)m_axi_gmem_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem_ARBURST, "(port)m_axi_gmem_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem_ARLOCK, "(port)m_axi_gmem_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem_ARCACHE, "(port)m_axi_gmem_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem_ARPROT, "(port)m_axi_gmem_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem_ARQOS, "(port)m_axi_gmem_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem_ARREGION, "(port)m_axi_gmem_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem_ARUSER, "(port)m_axi_gmem_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem_RVALID, "(port)m_axi_gmem_RVALID");
    sc_trace(mVcdFile, m_axi_gmem_RREADY, "(port)m_axi_gmem_RREADY");
    sc_trace(mVcdFile, m_axi_gmem_RDATA, "(port)m_axi_gmem_RDATA");
    sc_trace(mVcdFile, m_axi_gmem_RLAST, "(port)m_axi_gmem_RLAST");
    sc_trace(mVcdFile, m_axi_gmem_RID, "(port)m_axi_gmem_RID");
    sc_trace(mVcdFile, m_axi_gmem_RUSER, "(port)m_axi_gmem_RUSER");
    sc_trace(mVcdFile, m_axi_gmem_RRESP, "(port)m_axi_gmem_RRESP");
    sc_trace(mVcdFile, m_axi_gmem_BVALID, "(port)m_axi_gmem_BVALID");
    sc_trace(mVcdFile, m_axi_gmem_BREADY, "(port)m_axi_gmem_BREADY");
    sc_trace(mVcdFile, m_axi_gmem_BRESP, "(port)m_axi_gmem_BRESP");
    sc_trace(mVcdFile, m_axi_gmem_BID, "(port)m_axi_gmem_BID");
    sc_trace(mVcdFile, m_axi_gmem_BUSER, "(port)m_axi_gmem_BUSER");
    sc_trace(mVcdFile, s_axi_BUS_A_AWVALID, "(port)s_axi_BUS_A_AWVALID");
    sc_trace(mVcdFile, s_axi_BUS_A_AWREADY, "(port)s_axi_BUS_A_AWREADY");
    sc_trace(mVcdFile, s_axi_BUS_A_AWADDR, "(port)s_axi_BUS_A_AWADDR");
    sc_trace(mVcdFile, s_axi_BUS_A_WVALID, "(port)s_axi_BUS_A_WVALID");
    sc_trace(mVcdFile, s_axi_BUS_A_WREADY, "(port)s_axi_BUS_A_WREADY");
    sc_trace(mVcdFile, s_axi_BUS_A_WDATA, "(port)s_axi_BUS_A_WDATA");
    sc_trace(mVcdFile, s_axi_BUS_A_WSTRB, "(port)s_axi_BUS_A_WSTRB");
    sc_trace(mVcdFile, s_axi_BUS_A_ARVALID, "(port)s_axi_BUS_A_ARVALID");
    sc_trace(mVcdFile, s_axi_BUS_A_ARREADY, "(port)s_axi_BUS_A_ARREADY");
    sc_trace(mVcdFile, s_axi_BUS_A_ARADDR, "(port)s_axi_BUS_A_ARADDR");
    sc_trace(mVcdFile, s_axi_BUS_A_RVALID, "(port)s_axi_BUS_A_RVALID");
    sc_trace(mVcdFile, s_axi_BUS_A_RREADY, "(port)s_axi_BUS_A_RREADY");
    sc_trace(mVcdFile, s_axi_BUS_A_RDATA, "(port)s_axi_BUS_A_RDATA");
    sc_trace(mVcdFile, s_axi_BUS_A_RRESP, "(port)s_axi_BUS_A_RRESP");
    sc_trace(mVcdFile, s_axi_BUS_A_BVALID, "(port)s_axi_BUS_A_BVALID");
    sc_trace(mVcdFile, s_axi_BUS_A_BREADY, "(port)s_axi_BUS_A_BREADY");
    sc_trace(mVcdFile, s_axi_BUS_A_BRESP, "(port)s_axi_BUS_A_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, start_signal_i, "start_signal_i");
    sc_trace(mVcdFile, start_signal_o, "start_signal_o");
    sc_trace(mVcdFile, start_signal_o_ap_vld, "start_signal_o_ap_vld");
    sc_trace(mVcdFile, hls_check, "hls_check");
    sc_trace(mVcdFile, hls_check_ap_vld, "hls_check_ap_vld");
    sc_trace(mVcdFile, num, "num");
    sc_trace(mVcdFile, saMaster, "saMaster");
    sc_trace(mVcdFile, addr_bram_address0, "addr_bram_address0");
    sc_trace(mVcdFile, addr_bram_ce0, "addr_bram_ce0");
    sc_trace(mVcdFile, addr_bram_q0, "addr_bram_q0");
    sc_trace(mVcdFile, gmem_blk_n_AW, "gmem_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, gmem_blk_n_W, "gmem_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, gmem_blk_n_B, "gmem_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, gmem_blk_n_AR, "gmem_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, gmem_blk_n_R, "gmem_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, gmem_AWVALID, "gmem_AWVALID");
    sc_trace(mVcdFile, gmem_AWREADY, "gmem_AWREADY");
    sc_trace(mVcdFile, gmem_AWADDR, "gmem_AWADDR");
    sc_trace(mVcdFile, gmem_WVALID, "gmem_WVALID");
    sc_trace(mVcdFile, gmem_WREADY, "gmem_WREADY");
    sc_trace(mVcdFile, gmem_WDATA, "gmem_WDATA");
    sc_trace(mVcdFile, gmem_ARVALID, "gmem_ARVALID");
    sc_trace(mVcdFile, gmem_ARREADY, "gmem_ARREADY");
    sc_trace(mVcdFile, gmem_ARADDR, "gmem_ARADDR");
    sc_trace(mVcdFile, gmem_RVALID, "gmem_RVALID");
    sc_trace(mVcdFile, gmem_RREADY, "gmem_RREADY");
    sc_trace(mVcdFile, gmem_RDATA, "gmem_RDATA");
    sc_trace(mVcdFile, gmem_RLAST, "gmem_RLAST");
    sc_trace(mVcdFile, gmem_RID, "gmem_RID");
    sc_trace(mVcdFile, gmem_RUSER, "gmem_RUSER");
    sc_trace(mVcdFile, gmem_RRESP, "gmem_RRESP");
    sc_trace(mVcdFile, gmem_BVALID, "gmem_BVALID");
    sc_trace(mVcdFile, gmem_BREADY, "gmem_BREADY");
    sc_trace(mVcdFile, gmem_BRESP, "gmem_BRESP");
    sc_trace(mVcdFile, gmem_BID, "gmem_BID");
    sc_trace(mVcdFile, gmem_BUSER, "gmem_BUSER");
    sc_trace(mVcdFile, tmp_10_cast_fu_229_p1, "tmp_10_cast_fu_229_p1");
    sc_trace(mVcdFile, tmp_10_cast_reg_371, "tmp_10_cast_reg_371");
    sc_trace(mVcdFile, run_cnt_reg_387, "run_cnt_reg_387");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_233_p2, "tmp_fu_233_p2");
    sc_trace(mVcdFile, j_cast_fu_244_p1, "j_cast_fu_244_p1");
    sc_trace(mVcdFile, j_cast_reg_392, "j_cast_reg_392");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, j_1_fu_253_p2, "j_1_fu_253_p2");
    sc_trace(mVcdFile, j_1_reg_401, "j_1_reg_401");
    sc_trace(mVcdFile, i_1_cast2_fu_259_p1, "i_1_cast2_fu_259_p1");
    sc_trace(mVcdFile, i_1_cast2_reg_409, "i_1_cast2_reg_409");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_fu_269_p2, "i_fu_269_p2");
    sc_trace(mVcdFile, i_reg_417, "i_reg_417");
    sc_trace(mVcdFile, exitcond1_fu_263_p2, "exitcond1_fu_263_p2");
    sc_trace(mVcdFile, tmp_2_fu_280_p2, "tmp_2_fu_280_p2");
    sc_trace(mVcdFile, tmp_2_reg_427, "tmp_2_reg_427");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, saMaster2_sum_fu_288_p2, "saMaster2_sum_fu_288_p2");
    sc_trace(mVcdFile, saMaster2_sum_reg_432, "saMaster2_sum_reg_432");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_AWREADY, "ap_sig_ioackin_gmem_AWREADY");
    sc_trace(mVcdFile, i_3_fu_317_p2, "i_3_fu_317_p2");
    sc_trace(mVcdFile, i_3_reg_446, "i_3_reg_446");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, exitcond_fu_311_p2, "exitcond_fu_311_p2");
    sc_trace(mVcdFile, tmp_s_fu_328_p2, "tmp_s_fu_328_p2");
    sc_trace(mVcdFile, tmp_s_reg_456, "tmp_s_reg_456");
    sc_trace(mVcdFile, saMaster2_sum3_fu_337_p2, "saMaster2_sum3_fu_337_p2");
    sc_trace(mVcdFile, saMaster2_sum3_reg_461, "saMaster2_sum3_reg_461");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_ARREADY, "ap_sig_ioackin_gmem_ARREADY");
    sc_trace(mVcdFile, gmem_addr_1_read_reg_472, "gmem_addr_1_read_reg_472");
    sc_trace(mVcdFile, j_reg_183, "j_reg_183");
    sc_trace(mVcdFile, i_1_reg_194, "i_1_reg_194");
    sc_trace(mVcdFile, tmp_1_fu_248_p2, "tmp_1_fu_248_p2");
    sc_trace(mVcdFile, i_2_reg_205, "i_2_reg_205");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, tmp_4_fu_275_p1, "tmp_4_fu_275_p1");
    sc_trace(mVcdFile, tmp_8_fu_323_p1, "tmp_8_fu_323_p1");
    sc_trace(mVcdFile, saMaster2_sum_cast_fu_293_p1, "saMaster2_sum_cast_fu_293_p1");
    sc_trace(mVcdFile, saMaster2_sum3_cast_fu_342_p1, "saMaster2_sum3_cast_fu_342_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_AWREADY, "ap_reg_ioackin_gmem_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_WREADY, "ap_reg_ioackin_gmem_WREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_WREADY, "ap_sig_ioackin_gmem_WREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_ARREADY, "ap_reg_ioackin_gmem_ARREADY");
    sc_trace(mVcdFile, res_check_fu_94, "res_check_fu_94");
    sc_trace(mVcdFile, res_check_1_fu_360_p2, "res_check_1_fu_360_p2");
    sc_trace(mVcdFile, grp_load_fu_216_p1, "grp_load_fu_216_p1");
    sc_trace(mVcdFile, tmp_5_fu_219_p4, "tmp_5_fu_219_p4");
    sc_trace(mVcdFile, tmp_5_cast_fu_284_p1, "tmp_5_cast_fu_284_p1");
    sc_trace(mVcdFile, i_2_cast1_fu_307_p1, "i_2_cast1_fu_307_p1");
    sc_trace(mVcdFile, tmp_9_cast_fu_333_p1, "tmp_9_cast_fu_333_p1");
    sc_trace(mVcdFile, tmp_6_fu_352_p1, "tmp_6_fu_352_p1");
    sc_trace(mVcdFile, tmp_7_fu_355_p2, "tmp_7_fu_355_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("ddr_hls_test.hdltvin.dat");
    mHdltvoutHandle.open("ddr_hls_test.hdltvout.dat");
}

ddr_hls_test::~ddr_hls_test() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete addr_bram_U;
    delete ddr_hls_test_BUS_A_s_axi_U;
    delete ddr_hls_test_gmem_m_axi_U;
}

void ddr_hls_test::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void ddr_hls_test::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void ddr_hls_test::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_1;
}

void ddr_hls_test::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void ddr_hls_test::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void ddr_hls_test::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void ddr_hls_test::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv4_0;
}

void ddr_hls_test::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv8_FF;
}

void ddr_hls_test::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_gmem_ARREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, gmem_ARREADY.read())) {
                ap_reg_ioackin_gmem_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_gmem_AWREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_gmem_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, gmem_AWREADY.read())) {
                ap_reg_ioackin_gmem_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_WREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_gmem_WREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_gmem_WREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, gmem_WREADY.read())) {
                ap_reg_ioackin_gmem_WREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(tmp_1_fu_248_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        i_1_reg_194 = ap_const_lv14_0;
    } else if ((esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        i_1_reg_194 = i_reg_417.read();
    }
    if ((esl_seteq<1,1,1>(exitcond1_fu_263_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        i_2_reg_205 = ap_const_lv14_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        i_2_reg_205 = i_3_reg_446.read();
    }
    if ((esl_seteq<1,1,1>(exitcond_fu_311_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        j_reg_183 = j_1_reg_401.read();
    } else if ((esl_seteq<1,1,1>(tmp_fu_233_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        j_reg_183 = ap_const_lv31_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        res_check_fu_94 = res_check_1_fu_360_p2.read();
    } else if ((esl_seteq<1,1,1>(tmp_fu_233_p2.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        res_check_fu_94 = ap_const_lv1_1;
    }
    if ((esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
        gmem_addr_1_read_reg_472 = gmem_RDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_1_cast2_reg_409 = i_1_cast2_fu_259_p1.read();
        i_reg_417 = i_fu_269_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        i_3_reg_446 = i_3_fu_317_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_1_reg_401 = j_1_fu_253_p2.read();
        j_cast_reg_392 = j_cast_fu_244_p1.read();
    }
    if ((esl_seteq<1,1,1>(tmp_fu_233_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        run_cnt_reg_387 = num.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        saMaster2_sum3_reg_461 = saMaster2_sum3_fu_337_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        saMaster2_sum_reg_432 = saMaster2_sum_fu_288_p2.read();
        tmp_2_reg_427 = tmp_2_fu_280_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        tmp_10_cast_reg_371 = tmp_10_cast_fu_229_p1.read();
    }
    if ((esl_seteq<1,1,1>(exitcond_fu_311_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        tmp_s_reg_456 = tmp_s_fu_328_p2.read();
    }
}

void ddr_hls_test::thread_addr_bram_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        addr_bram_address0 =  (sc_lv<14>) (tmp_8_fu_323_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        addr_bram_address0 =  (sc_lv<14>) (tmp_4_fu_275_p1.read());
    } else {
        addr_bram_address0 = "XXXXXXXXXXXXXX";
    }
}

void ddr_hls_test::thread_addr_bram_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        addr_bram_ce0 = ap_const_logic_1;
    } else {
        addr_bram_ce0 = ap_const_logic_0;
    }
}

void ddr_hls_test::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void ddr_hls_test::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void ddr_hls_test::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void ddr_hls_test::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void ddr_hls_test::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void ddr_hls_test::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void ddr_hls_test::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void ddr_hls_test::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void ddr_hls_test::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void ddr_hls_test::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void ddr_hls_test::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void ddr_hls_test::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void ddr_hls_test::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void ddr_hls_test::thread_ap_done() {
    if ((esl_seteq<1,1,1>(tmp_1_fu_248_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void ddr_hls_test::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void ddr_hls_test::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(tmp_1_fu_248_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void ddr_hls_test::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void ddr_hls_test::thread_ap_sig_ioackin_gmem_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read())) {
        ap_sig_ioackin_gmem_ARREADY = gmem_ARREADY.read();
    } else {
        ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1;
    }
}

void ddr_hls_test::thread_ap_sig_ioackin_gmem_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_AWREADY.read())) {
        ap_sig_ioackin_gmem_AWREADY = gmem_AWREADY.read();
    } else {
        ap_sig_ioackin_gmem_AWREADY = ap_const_logic_1;
    }
}

void ddr_hls_test::thread_ap_sig_ioackin_gmem_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_WREADY.read())) {
        ap_sig_ioackin_gmem_WREADY = gmem_WREADY.read();
    } else {
        ap_sig_ioackin_gmem_WREADY = ap_const_logic_1;
    }
}

void ddr_hls_test::thread_exitcond1_fu_263_p2() {
    exitcond1_fu_263_p2 = (!i_1_reg_194.read().is_01() || !ap_const_lv14_2800.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_194.read() == ap_const_lv14_2800);
}

void ddr_hls_test::thread_exitcond_fu_311_p2() {
    exitcond_fu_311_p2 = (!i_2_reg_205.read().is_01() || !ap_const_lv14_2800.is_01())? sc_lv<1>(): sc_lv<1>(i_2_reg_205.read() == ap_const_lv14_2800);
}

void ddr_hls_test::thread_gmem_ARADDR() {
    gmem_ARADDR =  (sc_lv<32>) (saMaster2_sum3_cast_fu_342_p1.read());
}

void ddr_hls_test::thread_gmem_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_ARREADY.read()))) {
        gmem_ARVALID = ap_const_logic_1;
    } else {
        gmem_ARVALID = ap_const_logic_0;
    }
}

void ddr_hls_test::thread_gmem_AWADDR() {
    gmem_AWADDR =  (sc_lv<32>) (saMaster2_sum_cast_fu_293_p1.read());
}

void ddr_hls_test::thread_gmem_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_AWREADY.read()))) {
        gmem_AWVALID = ap_const_logic_1;
    } else {
        gmem_AWVALID = ap_const_logic_0;
    }
}

void ddr_hls_test::thread_gmem_BREADY() {
    if ((esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        gmem_BREADY = ap_const_logic_1;
    } else {
        gmem_BREADY = ap_const_logic_0;
    }
}

void ddr_hls_test::thread_gmem_RREADY() {
    if ((esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
        gmem_RREADY = ap_const_logic_1;
    } else {
        gmem_RREADY = ap_const_logic_0;
    }
}

void ddr_hls_test::thread_gmem_WDATA() {
    gmem_WDATA = esl_sext<64,32>(tmp_2_reg_427.read());
}

void ddr_hls_test::thread_gmem_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_WREADY.read()))) {
        gmem_WVALID = ap_const_logic_1;
    } else {
        gmem_WVALID = ap_const_logic_0;
    }
}

void ddr_hls_test::thread_gmem_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        gmem_blk_n_AR = m_axi_gmem_ARREADY.read();
    } else {
        gmem_blk_n_AR = ap_const_logic_1;
    }
}

void ddr_hls_test::thread_gmem_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        gmem_blk_n_AW = m_axi_gmem_AWREADY.read();
    } else {
        gmem_blk_n_AW = ap_const_logic_1;
    }
}

void ddr_hls_test::thread_gmem_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        gmem_blk_n_B = m_axi_gmem_BVALID.read();
    } else {
        gmem_blk_n_B = ap_const_logic_1;
    }
}

void ddr_hls_test::thread_gmem_blk_n_R() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        gmem_blk_n_R = m_axi_gmem_RVALID.read();
    } else {
        gmem_blk_n_R = ap_const_logic_1;
    }
}

void ddr_hls_test::thread_gmem_blk_n_W() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        gmem_blk_n_W = m_axi_gmem_WREADY.read();
    } else {
        gmem_blk_n_W = ap_const_logic_1;
    }
}

void ddr_hls_test::thread_grp_load_fu_216_p1() {
    grp_load_fu_216_p1 = res_check_fu_94.read();
}

void ddr_hls_test::thread_hls_check() {
    if ((esl_seteq<1,1,1>(tmp_fu_233_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        hls_check = ap_const_lv32_10E1;
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        hls_check = ap_const_lv32_4D2;
    } else {
        hls_check =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void ddr_hls_test::thread_hls_check_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(tmp_fu_233_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())))) {
        hls_check_ap_vld = ap_const_logic_1;
    } else {
        hls_check_ap_vld = ap_const_logic_0;
    }
}

void ddr_hls_test::thread_i_1_cast2_fu_259_p1() {
    i_1_cast2_fu_259_p1 = esl_zext<32,14>(i_1_reg_194.read());
}

void ddr_hls_test::thread_i_2_cast1_fu_307_p1() {
    i_2_cast1_fu_307_p1 = esl_zext<32,14>(i_2_reg_205.read());
}

void ddr_hls_test::thread_i_3_fu_317_p2() {
    i_3_fu_317_p2 = (!i_2_reg_205.read().is_01() || !ap_const_lv14_1.is_01())? sc_lv<14>(): (sc_biguint<14>(i_2_reg_205.read()) + sc_biguint<14>(ap_const_lv14_1));
}

void ddr_hls_test::thread_i_fu_269_p2() {
    i_fu_269_p2 = (!i_1_reg_194.read().is_01() || !ap_const_lv14_1.is_01())? sc_lv<14>(): (sc_biguint<14>(i_1_reg_194.read()) + sc_biguint<14>(ap_const_lv14_1));
}

void ddr_hls_test::thread_j_1_fu_253_p2() {
    j_1_fu_253_p2 = (!j_reg_183.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(j_reg_183.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void ddr_hls_test::thread_j_cast_fu_244_p1() {
    j_cast_fu_244_p1 = esl_zext<32,31>(j_reg_183.read());
}

void ddr_hls_test::thread_res_check_1_fu_360_p2() {
    res_check_1_fu_360_p2 = (tmp_7_fu_355_p2.read() | res_check_fu_94.read());
}

void ddr_hls_test::thread_saMaster2_sum3_cast_fu_342_p1() {
    saMaster2_sum3_cast_fu_342_p1 = esl_zext<64,30>(saMaster2_sum3_reg_461.read());
}

void ddr_hls_test::thread_saMaster2_sum3_fu_337_p2() {
    saMaster2_sum3_fu_337_p2 = (!tmp_9_cast_fu_333_p1.read().is_01() || !tmp_10_cast_reg_371.read().is_01())? sc_lv<30>(): (sc_biguint<30>(tmp_9_cast_fu_333_p1.read()) + sc_biguint<30>(tmp_10_cast_reg_371.read()));
}

void ddr_hls_test::thread_saMaster2_sum_cast_fu_293_p1() {
    saMaster2_sum_cast_fu_293_p1 = esl_zext<64,30>(saMaster2_sum_reg_432.read());
}

void ddr_hls_test::thread_saMaster2_sum_fu_288_p2() {
    saMaster2_sum_fu_288_p2 = (!tmp_5_cast_fu_284_p1.read().is_01() || !tmp_10_cast_reg_371.read().is_01())? sc_lv<30>(): (sc_biguint<30>(tmp_5_cast_fu_284_p1.read()) + sc_biguint<30>(tmp_10_cast_reg_371.read()));
}

void ddr_hls_test::thread_start_signal_o() {
    if ((esl_seteq<1,1,1>(tmp_1_fu_248_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, grp_load_fu_216_p1.read())) {
            start_signal_o = ap_const_lv32_206;
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, grp_load_fu_216_p1.read())) {
            start_signal_o = ap_const_lv32_32F;
        } else {
            start_signal_o =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        start_signal_o =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void ddr_hls_test::thread_start_signal_o_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(tmp_1_fu_248_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, grp_load_fu_216_p1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(tmp_1_fu_248_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, grp_load_fu_216_p1.read())))) {
        start_signal_o_ap_vld = ap_const_logic_1;
    } else {
        start_signal_o_ap_vld = ap_const_logic_0;
    }
}

void ddr_hls_test::thread_tmp_10_cast_fu_229_p1() {
    tmp_10_cast_fu_229_p1 = esl_zext<30,29>(tmp_5_fu_219_p4.read());
}

void ddr_hls_test::thread_tmp_1_fu_248_p2() {
    tmp_1_fu_248_p2 = (!j_cast_fu_244_p1.read().is_01() || !run_cnt_reg_387.read().is_01())? sc_lv<1>(): (sc_bigint<32>(j_cast_fu_244_p1.read()) < sc_bigint<32>(run_cnt_reg_387.read()));
}

void ddr_hls_test::thread_tmp_2_fu_280_p2() {
    tmp_2_fu_280_p2 = (!i_1_cast2_reg_409.read().is_01() || !j_cast_reg_392.read().is_01())? sc_lv<32>(): (sc_biguint<32>(i_1_cast2_reg_409.read()) + sc_biguint<32>(j_cast_reg_392.read()));
}

void ddr_hls_test::thread_tmp_4_fu_275_p1() {
    tmp_4_fu_275_p1 = esl_zext<64,14>(i_1_reg_194.read());
}

void ddr_hls_test::thread_tmp_5_cast_fu_284_p1() {
    tmp_5_cast_fu_284_p1 = esl_zext<30,24>(addr_bram_q0.read());
}

void ddr_hls_test::thread_tmp_5_fu_219_p4() {
    tmp_5_fu_219_p4 = saMaster.read().range(31, 3);
}

void ddr_hls_test::thread_tmp_6_fu_352_p1() {
    tmp_6_fu_352_p1 = esl_sext<64,32>(tmp_s_reg_456.read());
}

void ddr_hls_test::thread_tmp_7_fu_355_p2() {
    tmp_7_fu_355_p2 = (!gmem_addr_1_read_reg_472.read().is_01() || !tmp_6_fu_352_p1.read().is_01())? sc_lv<1>(): sc_lv<1>(gmem_addr_1_read_reg_472.read() == tmp_6_fu_352_p1.read());
}

void ddr_hls_test::thread_tmp_8_fu_323_p1() {
    tmp_8_fu_323_p1 = esl_zext<64,14>(i_2_reg_205.read());
}

void ddr_hls_test::thread_tmp_9_cast_fu_333_p1() {
    tmp_9_cast_fu_333_p1 = esl_zext<30,24>(addr_bram_q0.read());
}

void ddr_hls_test::thread_tmp_fu_233_p2() {
    tmp_fu_233_p2 = (!start_signal_i.read().is_01() || !ap_const_lv32_7CA.is_01())? sc_lv<1>(): sc_lv<1>(start_signal_i.read() == ap_const_lv32_7CA);
}

void ddr_hls_test::thread_tmp_s_fu_328_p2() {
    tmp_s_fu_328_p2 = (!i_2_cast1_fu_307_p1.read().is_01() || !j_cast_reg_392.read().is_01())? sc_lv<32>(): (sc_biguint<32>(i_2_cast1_fu_307_p1.read()) + sc_biguint<32>(j_cast_reg_392.read()));
}

void ddr_hls_test::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(tmp_fu_233_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(tmp_1_fu_248_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(exitcond1_fu_263_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_sig_ioackin_gmem_AWREADY.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_sig_ioackin_gmem_WREADY.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(gmem_BVALID.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 4096 : 
            if ((esl_seteq<1,1,1>(exitcond_fu_311_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_sig_ioackin_gmem_ARREADY.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            if ((esl_seteq<1,1,1>(gmem_RVALID.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
                ap_NS_fsm = ap_ST_fsm_state23;
            } else {
                ap_NS_fsm = ap_ST_fsm_state22;
            }
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<23>) ("XXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void ddr_hls_test::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_gmem_AWVALID\" :  \"" << m_axi_gmem_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_AWREADY\" :  \"" << m_axi_gmem_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWADDR\" :  \"" << m_axi_gmem_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWID\" :  \"" << m_axi_gmem_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLEN\" :  \"" << m_axi_gmem_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWSIZE\" :  \"" << m_axi_gmem_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWBURST\" :  \"" << m_axi_gmem_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWLOCK\" :  \"" << m_axi_gmem_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWCACHE\" :  \"" << m_axi_gmem_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWPROT\" :  \"" << m_axi_gmem_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWQOS\" :  \"" << m_axi_gmem_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWREGION\" :  \"" << m_axi_gmem_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_AWUSER\" :  \"" << m_axi_gmem_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WVALID\" :  \"" << m_axi_gmem_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_WREADY\" :  \"" << m_axi_gmem_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WDATA\" :  \"" << m_axi_gmem_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WSTRB\" :  \"" << m_axi_gmem_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WLAST\" :  \"" << m_axi_gmem_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WID\" :  \"" << m_axi_gmem_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_WUSER\" :  \"" << m_axi_gmem_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARVALID\" :  \"" << m_axi_gmem_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_ARREADY\" :  \"" << m_axi_gmem_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARADDR\" :  \"" << m_axi_gmem_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARID\" :  \"" << m_axi_gmem_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLEN\" :  \"" << m_axi_gmem_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARSIZE\" :  \"" << m_axi_gmem_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARBURST\" :  \"" << m_axi_gmem_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARLOCK\" :  \"" << m_axi_gmem_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARCACHE\" :  \"" << m_axi_gmem_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARPROT\" :  \"" << m_axi_gmem_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARQOS\" :  \"" << m_axi_gmem_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARREGION\" :  \"" << m_axi_gmem_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_ARUSER\" :  \"" << m_axi_gmem_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RVALID\" :  \"" << m_axi_gmem_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_RREADY\" :  \"" << m_axi_gmem_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RDATA\" :  \"" << m_axi_gmem_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RLAST\" :  \"" << m_axi_gmem_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RID\" :  \"" << m_axi_gmem_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RUSER\" :  \"" << m_axi_gmem_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_RRESP\" :  \"" << m_axi_gmem_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BVALID\" :  \"" << m_axi_gmem_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_BREADY\" :  \"" << m_axi_gmem_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BRESP\" :  \"" << m_axi_gmem_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BID\" :  \"" << m_axi_gmem_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_BUSER\" :  \"" << m_axi_gmem_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_BUS_A_AWVALID\" :  \"" << s_axi_BUS_A_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_BUS_A_AWREADY\" :  \"" << s_axi_BUS_A_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_BUS_A_AWADDR\" :  \"" << s_axi_BUS_A_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_BUS_A_WVALID\" :  \"" << s_axi_BUS_A_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_BUS_A_WREADY\" :  \"" << s_axi_BUS_A_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_BUS_A_WDATA\" :  \"" << s_axi_BUS_A_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_BUS_A_WSTRB\" :  \"" << s_axi_BUS_A_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_BUS_A_ARVALID\" :  \"" << s_axi_BUS_A_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_BUS_A_ARREADY\" :  \"" << s_axi_BUS_A_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_BUS_A_ARADDR\" :  \"" << s_axi_BUS_A_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_BUS_A_RVALID\" :  \"" << s_axi_BUS_A_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_BUS_A_RREADY\" :  \"" << s_axi_BUS_A_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_BUS_A_RDATA\" :  \"" << s_axi_BUS_A_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_BUS_A_RRESP\" :  \"" << s_axi_BUS_A_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_BUS_A_BVALID\" :  \"" << s_axi_BUS_A_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_BUS_A_BREADY\" :  \"" << s_axi_BUS_A_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_BUS_A_BRESP\" :  \"" << s_axi_BUS_A_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

